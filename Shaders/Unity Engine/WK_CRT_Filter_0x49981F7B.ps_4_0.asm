//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[17], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_output o0.xyzw
dcl_temps 10
sample r0.xyzw, v1.xyxx, t0.xyzw, s0
eq r0.w, cb0[16].w, l(0.000000)
if_nz r0.w
  sample r1.xyzw, v1.zwzz, t1.xyzw, s1
else
  mul r2.x, -cb0[4].x, cb0[16].w
  mov r2.yw, l(0,0,0,0)
  add r2.xy, r2.xyxx, v1.zwzz
  sample r3.xyzw, r2.xyxx, t1.xyzw, s1
  sample r4.xyzw, v1.zwzz, t1.xyzw, s1
  mul r2.z, cb0[4].x, cb0[16].w
  add r2.xy, r2.zwzz, v1.zwzz
  sample r1.xyzw, r2.xyxx, t1.xyzw, s1
  mov r1.x, r3.x
  mov r1.y, r4.y
  mov r1.w, l(1.000000)
endif
mul r2.xy, cb0[4].yxyy, cb0[4].wwww
mov r2.z, l(0)
add r2.xw, r2.zzzx, v1.zzzw
if_nz r0.w
  sample r3.xyzw, r2.xwxx, t1.xyzw, s1
else
  mul r4.x, -cb0[4].x, cb0[16].w
  mov r4.yw, l(0,0,0,0)
  add r4.xy, r2.xwxx, r4.xyxx
  sample r5.xyzw, r4.xyxx, t1.xyzw, s1
  sample r6.xyzw, r2.xwxx, t1.xyzw, s1
  mul r4.z, cb0[4].x, cb0[16].w
  add r2.xw, r2.xxxw, r4.zzzw
  sample r3.xyzw, r2.xwxx, t1.xyzw, s1
  mov r3.x, r5.x
  mov r3.y, r6.y
endif
mul r4.xy, cb0[4].yxyy, -cb0[4].wwww
mov r4.z, l(0)
add r2.xw, r4.zzzx, v1.zzzw
if_nz r0.w
  sample r5.xyzw, r2.xwxx, t1.xyzw, s1
else
  mul r6.x, -cb0[4].x, cb0[16].w
  mov r6.yw, l(0,0,0,0)
  add r4.xw, r2.xxxw, r6.xxxy
  sample r7.xyzw, r4.xwxx, t1.xyzw, s1
  sample r8.xyzw, r2.xwxx, t1.xyzw, s1
  mul r6.z, cb0[4].x, cb0[16].w
  add r2.xw, r2.xxxw, r6.zzzw
  sample r5.xyzw, r2.xwxx, t1.xyzw, s1
  mov r5.x, r7.x
  mov r5.y, r8.y
endif
add r2.xy, r2.yzyy, v1.zwzz
if_nz r0.w
  sample r6.xyzw, r2.xyxx, t1.xyzw, s1
else
  mul r7.x, -cb0[4].x, cb0[16].w
  mov r2.z, v1.w
  mov r7.yw, l(0,0,0,0)
  add r4.xw, r2.xxxz, r7.xxxy
  sample r8.xyzw, r4.xwxx, t1.xyzw, s1
  sample r9.xyzw, r2.xyxx, t1.xyzw, s1
  mul r7.z, cb0[4].x, cb0[16].w
  add r2.xy, r2.xzxx, r7.zwzz
  sample r6.xyzw, r2.xyxx, t1.xyzw, s1
  mov r6.x, r8.x
  mov r6.y, r9.y
endif
add r2.xy, r4.yzyy, v1.zwzz
if_nz r0.w
  sample r4.xyzw, r2.xyxx, t1.xyzw, s1
else
  mul r7.x, -cb0[4].x, cb0[16].w
  mov r2.z, v1.w
  mov r7.yw, l(0,0,0,0)
  add r7.xy, r2.xzxx, r7.xyxx
  sample r8.xyzw, r7.xyxx, t1.xyzw, s1
  sample r9.xyzw, r2.xyxx, t1.xyzw, s1
  mul r7.z, cb0[4].x, cb0[16].w
  add r2.xy, r2.xzxx, r7.zwzz
  sample r4.xyzw, r2.xyxx, t1.xyzw, s1
  mov r4.x, r8.x
  mov r4.y, r9.y
endif
max r2.xyz, r3.xyzx, r5.xyzx
max r3.xyz, r4.xyzx, r6.xyzx
max r2.xyz, r2.xyzx, r3.xyzx
add r0.w, r0.z, r0.y
add r0.w, r0.w, l(-0.100000)
ge r0.w, r0.w, r0.x
max r2.w, r0.x, r1.x
movc r0.xyz, r0.wwww, r2.wwww, r0.xyzx
add r3.xy, -cb0[5].yxyy, l(1.000000, 1.000000, 0.000000, 0.000000)
mad r0.w, r1.w, r3.x, cb0[5].y
mul r1.xyz, r1.wwww, r1.xyzx
mul r1.xyz, r3.xxxx, r1.xyzx
mad r0.xyz, r0.xyzx, cb0[5].yyyy, r1.xyzx
div r0.xyz, r0.xyzx, r0.wwww
max r1.xyz, r0.xyzx, r2.xyzx
mul r0.xyz, r3.yyyy, r0.xyzx
mad r0.xyz, r1.xyzx, cb0[5].xxxx, r0.xyzx
mul r0.w, cb0[4].z, l(0.0166666675)
ge r1.w, r0.w, -r0.w
frc r0.w, |r0.w|
movc r0.w, r1.w, r0.w, -r0.w
mul r1.w, r0.w, l(60.000000)
div r2.xy, v1.xyxx, cb0[4].xyxx
sincos r2.yz, null, r2.xxyx
mul r3.xy, r2.yzyy, v1.yxyy
div r3.xy, r3.xyxx, cb0[4].yxyy
mad r3.xy, r0.wwww, l(60.000000, 60.000000, 0.000000, 0.000000), r3.xyxx
mul r3.xy, r3.xyxx, l(89.419998, 89.419998, 0.000000, 0.000000)
sincos null, r3.xy, r3.xyxx
mul r3.xy, r3.xyxx, l(343.420013, 343.420013, 0.000000, 0.000000)
frc r3.xy, r3.xyxx
mad r0.w, r2.y, r2.z, r1.w
mul r0.w, r0.w, l(89.419998)
sincos null, r0.w, r0.w
mul r0.w, r0.w, l(343.420013)
frc r3.z, r0.w
add r2.yzw, r0.xxyz, r3.xxyz
add r4.xyz, r0.xyzx, -r3.xyzx
mul r5.xyz, r0.xyzx, r3.xyzx
div r6.xyz, r0.xyzx, r3.xyzx
ieq r7.xyzw, cb0[6].yyyy, l(1, 2, 3, 4)
max r8.xyz, r0.xyzx, r3.xyzx
ieq r9.xyzw, cb0[6].ywww, l(5, 1, 2, 3)
min r3.yzw, r0.xxyz, r3.xxyz
movc r1.xyz, r9.xxxx, r3.yzwy, r1.xyzx
movc r1.xyz, r7.wwww, r8.xyzx, r1.xyzx
movc r1.xyz, r7.zzzz, r6.xyzx, r1.xyzx
movc r1.xyz, r7.yyyy, r5.xyzx, r1.xyzx
movc r1.xyz, r7.xxxx, r4.xyzx, r1.xyzx
movc_sat r1.xyz, cb0[6].yyyy, r1.xyzx, r2.yzwy
add r2.yz, -cb0[6].zzxz, l(0.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, r2.yyyy
mad r0.xyz, r1.xyzx, cb0[6].zzzz, r0.xyzx
add r3.yzw, r3.xxxx, r0.xxyz
add r4.xyz, -r3.xxxx, r0.xyzx
mul r5.xyz, r3.xxxx, r0.xyzx
div r6.xyz, r0.xyzx, r3.xxxx
max r7.xyz, r0.xyzx, r3.xxxx
ieq r2.yw, cb0[6].wwww, l(0, 4, 0, 5)
min r8.xyz, r0.xyzx, r3.xxxx
movc r1.xyz, r2.wwww, r8.xyzx, r1.xyzx
movc r1.xyz, r2.yyyy, r7.xyzx, r1.xyzx
movc r1.xyz, r9.wwww, r6.xyzx, r1.xyzx
movc r1.xyz, r9.zzzz, r5.xyzx, r1.xyzx
movc r1.xyz, r9.yyyy, r4.xyzx, r1.xyzx
movc_sat r1.xyz, cb0[6].wwww, r1.xyzx, r3.yzwy
add r0.w, -cb0[7].y, l(1.000000)
mul r0.xyz, r0.wwww, r0.xyzx
mad r0.xyz, r1.xyzx, cb0[7].yyyy, r0.xyzx
mul r0.w, r2.x, l(0.333333343)
ge r1.x, r0.w, -r0.w
frc r0.w, |r0.w|
movc r0.w, r1.x, r0.w, -r0.w
mul r0.w, r0.w, l(3.000000)
round_ni r0.w, r0.w
eq r1.xy, r0.wwww, l(0.000000, 1.000000, 0.000000, 0.000000)
mul r0.w, cb0[5].w, cb0[5].z
mad r1.z, -cb0[5].z, cb0[5].w, r0.x
mad r0.w, -r0.w, l(2.000000), r0.x
movc r0.w, r1.y, r1.z, r0.w
movc r0.w, r1.x, r0.x, r0.w
mul r0.xyz, r2.zzzz, r0.xyzx
mad r0.xyz, r0.wwww, cb0[6].xxxx, r0.xyzx
mul r0.w, cb0[4].y, cb0[15].w
div r0.w, v1.y, r0.w
mad r1.xy, cb0[16].zxzz, cb0[4].yzyy, r0.wwww
mad r1.x, cb0[16].x, cb0[4].z, r1.x
sincos r1.x, null, r1.x
mad_sat r0.x, r1.x, cb0[16].y, r0.x
sincos r1.x, null, r1.y
mad_sat r0.y, r1.x, cb0[16].y, r0.y
add r0.w, r0.w, -cb0[16].z
mad r0.w, cb0[16].x, cb0[4].z, r0.w
sincos r0.w, null, r0.w
mad_sat r0.z, r0.w, cb0[16].y, r0.z
mul r1.xyzw, r0.yyyy, cb0[9].xyzw
mad r1.xyzw, cb0[8].xyzw, r0.xxxx, r1.xyzw
mad r0.xyzw, cb0[10].xyzw, r0.zzzz, r1.xyzw
add r0.xyzw, r0.xyzw, cb0[11].xyzw
add r1.xyz, -cb0[12].xyzx, cb0[13].xyzx
div r0.xyz, r0.xyzx, r1.xyzx
add r0.xyz, r0.xyzx, cb0[12].xyzx
max r0.xyz, r0.xyzx, cb0[14].xyzx
min o0.xyz, r0.xyzx, cb0[15].xyzx
mov o0.w, r0.w
ret
// Approximately 0 instruction slots used
